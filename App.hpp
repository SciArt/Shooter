////////////////////////////////////////////////////////////
//
// SHOOTER
//
// Autor:       Gerard Wypych
// Prowadzący:  mgr inż. Bartłomiej Gajewski
//
////////////////////////////////////////////////////////////

#ifndef APP_HPP
#define APP_HPP

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include "SFML/Graphics.hpp"
#include "SimpleText.hpp"

////////////////////////////////////////////////////////////
/// \brief Main class of application
///
////////////////////////////////////////////////////////////
class App
{
public:
    ////////////////////////////////////////////////////////////
    /// \brief Default destructor
    ///
    ////////////////////////////////////////////////////////////
    ~App(){}

    ////////////////////////////////////////////////////////////
    /// \brief Initalization
    ///
    ////////////////////////////////////////////////////////////
    static bool init();

    ////////////////////////////////////////////////////////////
    /// \brief Enumeration of application status
    ///
    ////////////////////////////////////////////////////////////
    enum Status
    {
        INIT,
        MENU,
        INGAME,
        GAMEOVER,
        //HIGHSCORES,
        //LOAD,
        EXIT
    };

    ////////////////////////////////////////////////////////////
    /// \brief Set status of the application
    ///
    ////////////////////////////////////////////////////////////
    static void setStatus( const App::Status& status );

    ////////////////////////////////////////////////////////////
    /// \brief Get status of the application
    ///
    ////////////////////////////////////////////////////////////
    static Status getStatus();

    ////////////////////////////////////////////////////////////
    /// \brief Get reference on font for texts
    ///
    ////////////////////////////////////////////////////////////
    static const sf::Font& getFont();

    ////////////////////////////////////////////////////////////
    /// \brief Get Resolution Factor
    /// Just window's height in pixels devided by 9.0f
    ///
    ////////////////////////////////////////////////////////////
    static const float& getResFactor();

    ////////////////////////////////////////////////////////////
    /// \brief Get elapsed time, for logic part, physics etc.
    ///
    ////////////////////////////////////////////////////////////
    static const sf::Int32& getElapsedTime();

    ////////////////////////////////////////////////////////////
    /// \brief Get size of the window
    ///
    ////////////////////////////////////////////////////////////
    static sf::Vector2u getWindowSize();

    ////////////////////////////////////////////////////////////
    /// \brief Draw any* drawable object on the screen
    /// *any - not yet implemented
    ///
    ////////////////////////////////////////////////////////////
    static void draw( const sf::Drawable& drawable );

    ////////////////////////////////////////////////////////////
    /// \brief Check if key was pressed and now is released
    ///
    ////////////////////////////////////////////////////////////
    static bool isKeyReleased( sf::Keyboard::Key key );

private:
    ////////////////////////////////////////////////////////////
    /// \brief Default construtor (PRIVATE)
    ///
    ////////////////////////////////////////////////////////////
    App(){}

    /// \brief Pointer to the only object of this class
    static App * p_this;

    ////////////////////////////////////////////////////////////
    /// \brief Main function, runs everthing
    ///
    ////////////////////////////////////////////////////////////
    static void run();

    ////////////////////////////////////////////////////////////
    /// \brief Check if the application is running
    ///
    ////////////////////////////////////////////////////////////
    static bool isRun();

    ////////////////////////////////////////////////////////////
    /// \brief Check events - close window, keyboard etc.
    ///
    ////////////////////////////////////////////////////////////
    static void checkEvents();

    ////////////////////////////////////////////////////////////
    /// \brief Close application
    ///
    ////////////////////////////////////////////////////////////
    static void close();

    ////////////////////////////////////////////////////////////
    //
    // Member data
    //
    ////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////
    /// \brief Window object
    ////////////////////////////////////////////////////////////
    sf::RenderWindow window;

    ////////////////////////////////////////////////////////////
    /// \brief Main clock of application
    ////////////////////////////////////////////////////////////
    sf::Clock clock;
    ////////////////////////////////////////////////////////////
    /// \brief Says how much time elapsed in last frame
    ////////////////////////////////////////////////////////////
    sf::Int32 elapsed_time;

    ////////////////////////////////////////////////////////////
    /// \brief Font for the texts
    ////////////////////////////////////////////////////////////
    sf::Font font;

    ////////////////////////////////////////////////////////////
    /// \brief Status of the application
    ////////////////////////////////////////////////////////////
    Status status;

    ////////////////////////////////////////////////////////////
    /// \brief For displaying ammount of Frames Per Second
    ////////////////////////////////////////////////////////////
    SimpleText fps;
    ////////////////////////////////////////////////////////////
    /// \brief Clock for updating fps text, 1 sec interval
    ////////////////////////////////////////////////////////////
    sf::Clock trigger;
    ////////////////////////////////////////////////////////////
    /// \brief FPS from 1 sec, counter
    ////////////////////////////////////////////////////////////
    unsigned int fps_counter;
    ////////////////////////////////////////////////////////////
    /// \brief Flag for displaying FPS
    ////////////////////////////////////////////////////////////
    bool f_FPS_display;

    ////////////////////////////////////////////////////////////
    /// \brief Resolution factor, for scaling on any resolution
    ////////////////////////////////////////////////////////////
    float res_factor;

    ////////////////////////////////////////////////////////////
    /// \brief Array with key status
    /// (true if key was pressed and now is released)
    ////////////////////////////////////////////////////////////
    bool f_released_key[ sf::Keyboard::Key::KeyCount ];
};


#endif
