////////////////////////////////////////////////////////////
//
// SHOOTER
//
// Autor:       Gerard Wypych
// Prowadzący:  mgr inż. Bartłomiej Gajewski
//
////////////////////////////////////////////////////////////

#ifndef BUTTON_HPP
#define BUTTON_HPP

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include "SFML/Graphics.hpp"
#include <string>

////////////////////////////////////////////////////////////
/// \brief  Button class, just text with status
///
////////////////////////////////////////////////////////////
class Button
{
public:
    ////////////////////////////////////////////////////////////
    /// \brief  Enumerations of possible button's origins
    ///
    /// The origin of an object defines the center point for
    /// all transformations (position, scale, rotation).
    ///
    ////////////////////////////////////////////////////////////
    enum Origin
    {
        TOPLEFT,
        CENTER
    };

    ////////////////////////////////////////////////////////////
    /// \brief  Constructor, empty button
    ///
    ////////////////////////////////////////////////////////////
    Button();

    ////////////////////////////////////////////////////////////
    /// \brief  Constructor
    /// Requires all necessary data to build the button
    /// Very similar to create()
    ////////////////////////////////////////////////////////////
    Button( const std::string &title,
        const float &height, const sf::Vector2f& position,
        const sf::Color &color, const sf::Font &font,
        const Button::Origin &origin = Button::Origin::CENTER );

    ////////////////////////////////////////////////////////////
    /// \brief Destructor
    ///
    ////////////////////////////////////////////////////////////
    ~Button();

    ////////////////////////////////////////////////////////////
    /// \brief  Draw the button
    ///
    ////////////////////////////////////////////////////////////
    void draw();

    ////////////////////////////////////////////////////////////
    /// \brief  Set title of the button
    ///
    /// \param  title   Title of the button
    /// \param  height   Height of the button, default 0.0f
    /// If height is 0.0f, button will keep old height.
    ///
    /// \see    getTitle
    ///
    ////////////////////////////////////////////////////////////
    void setTitle( const std::string& title, const float height = 0.0f );

    ////////////////////////////////////////////////////////////
    /// \brief  Get title of the button
    ///
    /// \return Button  title as std::string
    ///
    /// \see    setTitle
    ///
    ////////////////////////////////////////////////////////////
    const std::string getTitle() const;

    ////////////////////////////////////////////////////////////
    /// \brief  Set height of the button
    ///
    /// \param  height    Height of the button
    ///
    /// \see    setSize
    ////////////////////////////////////////////////////////////
    void setHeight( const float& height );

    ////////////////////////////////////////////////////////////
    /// \brief  Get height of the button
    ///
    /// \return Height of the button
    ///
    ////////////////////////////////////////////////////////////
    float getHeight() const;

    ////////////////////////////////////////////////////////////
    /// \brief  Set position of the button
    ///
    /// \param  position    Coordinates of the button's origin
    ///
    /// \see    getPos
    ///
    ////////////////////////////////////////////////////////////
    void setPos( const sf::Vector2f& position );

    ////////////////////////////////////////////////////////////
    /// \brief  Get position of the button
    ///
    /// \return Position of the button
    ///
    /// \see    setPos
    ////////////////////////////////////////////////////////////
    sf::Vector2f getPos() const;

    ////////////////////////////////////////////////////////////
    /// \brief  Set origin of the button
    ///
    /// \param  origin      New origin of the button
    ///
    /// \see    getOrigin
    ////////////////////////////////////////////////////////////
    void setOrigin( const Button::Origin& origin );

    ////////////////////////////////////////////////////////////
    /// \brief  Get origin of the button
    ///
    /// \return Origin of the button
    ///
    /// \see    setOrigin
    ////////////////////////////////////////////////////////////
    Button::Origin getOrigin() const;

    ////////////////////////////////////////////////////////////
    /// \brief  Set font of the button
    ///
    /// \param  font    New font
    ///
    ////////////////////////////////////////////////////////////
    void setFont( const sf::Font &font );

    ////////////////////////////////////////////////////////////
    /// \brief  Set color of the button
    ///
    /// \param  color   New color
    ///
    ////////////////////////////////////////////////////////////
    void setColor( const sf::Color &color );

    ////////////////////////////////////////////////////////////
    /// \brief  Set status to negated status
    ///
    ////////////////////////////////////////////////////////////
    void switchStatus();

    ////////////////////////////////////////////////////////////
    /// \brief  Set status
    ///
    /// \param  f_active    Wanted status of the button
    ///
    ////////////////////////////////////////////////////////////
    void switchStatus( const bool& f_active );

    ////////////////////////////////////////////////////////////
    /// \brief  Get status of the button
    ///
    ////////////////////////////////////////////////////////////
    bool getStatus() const;

    ////////////////////////////////////////////////////////////
    /// \brief  Creating button
    /// Nothing more required then all data in arguments
    ///
    ////////////////////////////////////////////////////////////
    void create( const std::string &title,
        const float &height, const sf::Vector2f& position,
        const sf::Color &color, const sf::Font &font,
        const Button::Origin &origin = Button::Origin::TOPLEFT );

private:
    sf::Text text; /// < Text when inactive
    sf::Text text_active; /// < Text when active
    float height; /// < Size of text
    Button::Origin origin; /// < Origin of the button (topleft etc.)
    bool f_active; /// < Status of the button

    ////////////////////////////////////////////////////////////
    /// \brief  Updating text_active
    /// Useful when main text has changed
    ///
    ////////////////////////////////////////////////////////////
    void refreshTextActive();

    unsigned int ID;
    static unsigned int max_quantity;
    static unsigned int quantity;
};
#endif
